1: for finding average salary in age groups of size 3 (advanced aggregation fn):
select concat(concat(convert(age,char),"-"),convert(age+2,char)) as age_group, avg(ags) 
over (order by age rows 2 preceding ) as avg_salary 
from (select avg(salary) as ags, (year(curdate()) - year(dob)) as age from employee group by age) as t1;

2: finding the top selling products along with rank and qty sold (advanced aggregation fn)
select rank() over (order by tot_sales desc) as top_selling, item_id, tot_sales 
from (select item_id, sum(qty) as tot_sales from order_item group by item_id) as t1;

3. list of suppliers who supply to every pincode where a customer lives
select s.co_id, s.co_name from supplier s where not exists(select distinct(c.pin_code) from customer c where (not exists(select sa.co_id from supply_areas sa where sa.co_id = s.co_id and sa.pincode = c.pin_code)));

4. list of items which can be delivered to a particular customer according to his pincode

5. delivery person can see which orders (order_id, address) are to be delivered on a particular day (using his serviced pincodes, and date diff (cur_date - ord_date)>1)

6. item names for those whose average qty per order greater than 0.5
select item_name, avg(order_item.qty)/(select count(order_id) from orders) from
order_item, inventory where (order_item.item_id = inventory.item_id)
group by inventory.item_id having (avg(order_item.qty)/(select count(order_id) from orders)>0.5);

7. orders having more than one item from grocery department 
SELECT orders.order_id FROM orders, order_item, inventory WHERE orders.order_id = order_item.order_id AND order_item.item_id = inventory.item_id HAVING COUNT(inventory.category = 'grocery') >1;  

8. average cart value of people living in a particular region

9. suppliers who supply products of atleast 3 distinct companies
